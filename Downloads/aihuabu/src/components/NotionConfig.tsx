import { useState } from "react";
import { TopNavigation } from "./TopNavigation";
import { Button } from "./ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./ui/select";
import { Switch } from "./ui/switch";
import { Separator } from "./ui/separator";
import { Badge } from "./ui/badge";
import { Textarea } from "./ui/textarea";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "./ui/alert-dialog";
import { 
  FileText, 
  CheckCircle2, 
  XCircle, 
  ArrowLeft, 
  Settings, 
  BookOpen, 
  Folder, 
  Layout, 
  TestTube,
  AlertTriangle,
  Info,
  Calendar,
  BarChart3,
  FileSpreadsheet
} from "lucide-react";

interface NotionWorkspace {
  id: string;
  name: string;
  icon?: string;
  members: number;
}

interface NotionDatabase {
  id: string;
  title: string;
  icon: string;
  parent: string;
  url: string;
}

interface NotionPage {
  id: string;
  title: string;
  icon: string;
  parent: string;
  url: string;
}

interface NotionConfigProps {
  appContext: any;
}

export function NotionConfig({ appContext }: NotionConfigProps) {
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedWorkspace, setSelectedWorkspace] = useState("workspace-1");
  const [targetDatabase, setTargetDatabase] = useState("reports-db");
  const [templatePage, setTemplatePage] = useState("template-1");
  const [exportFormat, setExportFormat] = useState("database");
  
  // Export settings
  const [autoExportReports, setAutoExportReports] = useState(true);
  const [exportActionCards, setExportActionCards] = useState(true);
  const [exportReconciliation, setExportReconciliation] = useState(false);
  const [exportQuarterlyReviews, setExportQuarterlyReviews] = useState(true);
  const [includeCharts, setIncludeCharts] = useState(true);
  const [organizeByDate, setOrganizeByDate] = useState(true);

  // Page template
  const [pageTemplate, setPageTemplate] = useState(`# {{report_type}} - {{date}}

## Overview
{{summary}}

## Key Metrics
- **Analysis Tasks:** {{task_count}}
- **ROI Deviation:** {{roi_deviation}}%
- **Completion Rate:** {{completion_rate}}%

## Action Items
{{action_items}}

## Detailed Analysis
{{detailed_analysis}}

## Next Steps
{{next_steps}}

---
*Generated by Figma Make on {{timestamp}}*
*[View Full Report]({{report_link}})*`);

  // Mock data
  const workspaces: NotionWorkspace[] = [
    { id: "workspace-1", name: "Product Team", icon: "🚀", members: 24 },
    { id: "workspace-2", name: "Company Wiki", icon: "📚", members: 156 },
    { id: "workspace-3", name: "Analytics Hub", icon: "📊", members: 42 }
  ];

  const databases: NotionDatabase[] = [
    { id: "reports-db", title: "Reports & Analysis", icon: "📊", parent: "Product Team", url: "notion.so/reports" },
    { id: "projects-db", title: "Product Projects", icon: "🎯", parent: "Product Team", url: "notion.so/projects" },
    { id: "metrics-db", title: "KPI Dashboard", icon: "📈", parent: "Analytics Hub", url: "notion.so/metrics" },
    { id: "reviews-db", title: "Quarterly Reviews", icon: "📋", parent: "Company Wiki", url: "notion.so/reviews" }
  ];

  const templatePages: NotionPage[] = [
    { id: "template-1", title: "Analysis Report Template", icon: "📝", parent: "Templates", url: "notion.so/template-1" },
    { id: "template-2", title: "Action Card Summary", icon: "✅", parent: "Templates", url: "notion.so/template-2" },
    { id: "template-3", title: "Quarterly Review Template", icon: "📅", parent: "Templates", url: "notion.so/template-3" },
    { id: "custom", title: "Create Custom Template", icon: "🎨", parent: "Custom", url: "" }
  ];

  const exportFormats = [
    { value: "database", label: "Database Entry", description: "Add as row to existing database" },
    { value: "page", label: "New Page", description: "Create standalone page with template" },
    { value: "subpage", label: "Sub-page", description: "Add as child page under selected parent" }
  ];

  const handleConnect = async () => {
    setIsLoading(true);
    // Simulate OAuth flow
    setTimeout(() => {
      setIsConnected(true);
      setIsLoading(false);
    }, 2000);
  };

  const handleDisconnect = async () => {
    setIsLoading(true);
    setTimeout(() => {
      setIsConnected(false);
      setIsLoading(false);
    }, 1000);
  };

  const handleTestConnection = async () => {
    setIsLoading(true);
    // Simulate test page creation
    setTimeout(() => {
      setIsLoading(false);
      console.log("Test page created successfully");
    }, 1500);
  };

  const handleSaveSettings = () => {
    console.log("Saving Notion configuration:", {
      workspace: selectedWorkspace,
      database: targetDatabase,
      template: templatePage,
      format: exportFormat,
      automation: { autoExportReports, exportActionCards, exportReconciliation, exportQuarterlyReviews },
      options: { includeCharts, organizeByDate },
      pageTemplate
    });
  };

  return (
    <div className="min-h-screen bg-background">
      <TopNavigation 
        currentPage="notion-config"
        onNavigate={appContext.navigateTo}
        onLogout={appContext.handleLogout}
        user={appContext.user}
      />
      
      <div className="flex-1 p-6">
        <div className="max-w-4xl mx-auto space-y-6">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => appContext.navigateTo("team-settings")}
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Settings
              </Button>
              <div className="flex items-center space-x-3">
                <div className="p-2 rounded-lg bg-gray-600 text-white">
                  <FileText className="h-6 w-6" />
                </div>
                <div>
                  <h1 className="text-2xl font-medium">Notion Integration</h1>
                  <p className="text-muted-foreground">
                    Export reports and documentation to your Notion workspace
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              {isConnected ? (
                <Badge className="bg-green-100 text-green-800 border-green-200">
                  <CheckCircle2 className="h-3 w-3 mr-1" />
                  Connected
                </Badge>
              ) : (
                <Badge className="bg-gray-100 text-gray-800 border-gray-200">
                  <XCircle className="h-3 w-3 mr-1" />
                  Not Connected
                </Badge>
              )}
            </div>
          </div>

          {/* Connection Setup */}
          {!isConnected ? (
            <Card className="border-gray-200 bg-gray-50">
              <CardContent className="pt-6">
                <div className="flex items-start space-x-3">
                  <AlertTriangle className="h-5 w-5 text-gray-600 mt-0.5" />
                  <div className="flex-1">
                    <h3 className="font-medium text-gray-900">Connect to Notion</h3>
                    <p className="text-sm text-gray-700 mt-1">
                      Connect your Notion workspace to automatically export reports, action cards, and quarterly reviews. You'll need admin permissions to authorize the integration.
                    </p>
                    <Button 
                      onClick={handleConnect}
                      disabled={isLoading}
                      className="mt-3 bg-gray-600 hover:bg-gray-700"
                    >
                      {isLoading ? "Connecting..." : "Connect to Notion"}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ) : (
            <>
              {/* Workspace Settings */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Settings className="h-5 w-5 text-gray-600" />
                    <span>Workspace Settings</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="workspace">Connected Workspace</Label>
                      <Select value={selectedWorkspace} onValueChange={setSelectedWorkspace}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {workspaces.map(workspace => (
                            <SelectItem key={workspace.id} value={workspace.id}>
                              <div className="flex items-center space-x-2">
                                <span>{workspace.icon}</span>
                                <span>{workspace.name}</span>
                                <span className="text-xs text-muted-foreground">({workspace.members} members)</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label>Connection Status</Label>
                      <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                        <div className="flex items-center space-x-2">
                          <CheckCircle2 className="h-4 w-4 text-green-600" />
                          <span className="text-sm text-green-800">Connected</span>
                        </div>
                        <span className="text-xs text-green-600">Last sync: 5 min ago</span>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-between items-center pt-2">
                    <div className="text-sm text-muted-foreground">
                      Connected as: <span className="font-medium">admin@company.com</span>
                    </div>
                    <div className="flex space-x-2">
                      <Button 
                        variant="outline" 
                        size="sm"
                        onClick={handleTestConnection}
                        disabled={isLoading}
                      >
                        <TestTube className="h-4 w-4 mr-2" />
                        {isLoading ? "Testing..." : "Test Connection"}
                      </Button>
                      <AlertDialog>
                        <AlertDialogTrigger asChild>
                          <Button variant="outline" size="sm" className="text-red-600 hover:text-red-700 hover:bg-red-50">
                            Disconnect
                          </Button>
                        </AlertDialogTrigger>
                        <AlertDialogContent>
                          <AlertDialogHeader>
                            <AlertDialogTitle>Disconnect Notion Integration?</AlertDialogTitle>
                            <AlertDialogDescription>
                              This will stop automatic exports to Notion. Existing pages and content will remain unchanged.
                            </AlertDialogDescription>
                          </AlertDialogHeader>
                          <AlertDialogFooter>
                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                            <AlertDialogAction onClick={handleDisconnect} className="bg-red-600 hover:bg-red-700">
                              Disconnect
                            </AlertDialogAction>
                          </AlertDialogFooter>
                        </AlertDialogContent>
                      </AlertDialog>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Export Configuration */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Folder className="h-5 w-5 text-blue-600" />
                    <span>Export Configuration</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="database">Target Database</Label>
                      <Select value={targetDatabase} onValueChange={setTargetDatabase}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {databases.map(db => (
                            <SelectItem key={db.id} value={db.id}>
                              <div className="flex items-center space-x-2">
                                <span>{db.icon}</span>
                                <span>{db.title}</span>
                                <span className="text-xs text-muted-foreground">({db.parent})</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="format">Export Format</Label>
                      <Select value={exportFormat} onValueChange={setExportFormat}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {exportFormats.map(format => (
                            <SelectItem key={format.value} value={format.value}>
                              <div className="space-y-1">
                                <div>{format.label}</div>
                                <div className="text-xs text-muted-foreground">{format.description}</div>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="template">Page Template</Label>
                    <Select value={templatePage} onValueChange={setTemplatePage}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {templatePages.map(template => (
                          <SelectItem key={template.id} value={template.id}>
                            <div className="flex items-center space-x-2">
                              <span>{template.icon}</span>
                              <span>{template.title}</span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>

              {/* Automation Settings */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <BarChart3 className="h-5 w-5 text-green-600" />
                    <span>Export Automation</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label htmlFor="auto-export">Auto-export Reports</Label>
                        <p className="text-sm text-muted-foreground">
                          Automatically export analysis reports when completed
                        </p>
                      </div>
                      <Switch
                        id="auto-export"
                        checked={autoExportReports}
                        onCheckedChange={setAutoExportReports}
                      />
                    </div>

                    <Separator />

                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label htmlFor="export-cards">Export Action Cards</Label>
                        <p className="text-sm text-muted-foreground">
                          Include action cards in exported reports and summaries
                        </p>
                      </div>
                      <Switch
                        id="export-cards"
                        checked={exportActionCards}
                        onCheckedChange={setExportActionCards}
                      />
                    </div>

                    <Separator />

                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label htmlFor="export-reconciliation">Export Reconciliation Reports</Label>
                        <p className="text-sm text-muted-foreground">
                          Include reconciliation analysis and deviation reports
                        </p>
                      </div>
                      <Switch
                        id="export-reconciliation"
                        checked={exportReconciliation}
                        onCheckedChange={setExportReconciliation}
                      />
                    </div>

                    <Separator />

                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label htmlFor="export-quarterly">Export Quarterly Reviews</Label>
                        <p className="text-sm text-muted-foreground">
                          Automatically export quarterly review documents
                        </p>
                      </div>
                      <Switch
                        id="export-quarterly"
                        checked={exportQuarterlyReviews}
                        onCheckedChange={setExportQuarterlyReviews}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Export Options */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Layout className="h-5 w-5 text-purple-600" />
                    <span>Export Options</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label htmlFor="include-charts">Include Charts & Visualizations</Label>
                        <p className="text-sm text-muted-foreground">
                          Export charts as images and embed in Notion pages
                        </p>
                      </div>
                      <Switch
                        id="include-charts"
                        checked={includeCharts}
                        onCheckedChange={setIncludeCharts}
                      />
                    </div>

                    <Separator />

                    <div className="flex items-center justify-between">
                      <div className="space-y-1">
                        <Label htmlFor="organize-date">Organize by Date</Label>
                        <p className="text-sm text-muted-foreground">
                          Create date-based folder structure for exported content
                        </p>
                      </div>
                      <Switch
                        id="organize-date"
                        checked={organizeByDate}
                        onCheckedChange={setOrganizeByDate}
                      />
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Page Template Editor */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <BookOpen className="h-5 w-5 text-orange-600" />
                    <span>Page Template</span>
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="page-template">Custom Page Template</Label>
                    <Textarea
                      id="page-template"
                      value={pageTemplate}
                      onChange={(e) => setPageTemplate(e.target.value)}
                      className="min-h-64 font-mono text-sm"
                      placeholder="Enter your page template..."
                    />
                  </div>
                  <div className="text-sm text-muted-foreground">
                    <p className="font-medium mb-2">Available Variables:</p>
                    <div className="grid grid-cols-3 gap-2 text-xs">
                      <span>{{report_type}}</span>
                      <span>{{date}}</span>
                      <span>{{summary}}</span>
                      <span>{{task_count}}</span>
                      <span>{{roi_deviation}}</span>
                      <span>{{completion_rate}}</span>
                      <span>{{action_items}}</span>
                      <span>{{detailed_analysis}}</span>
                      <span>{{next_steps}}</span>
                      <span>{{timestamp}}</span>
                      <span>{{report_link}}</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Information Card */}
              <Card className="border-blue-200 bg-blue-50">
                <CardContent className="pt-6">
                  <div className="flex items-start space-x-3">
                    <Info className="h-5 w-5 text-blue-600 mt-0.5" />
                    <div className="space-y-2">
                      <h3 className="font-medium text-blue-900">Export Behavior</h3>
                      <ul className="text-sm text-blue-700 space-y-1">
                        <li>• Pages are created within 5 minutes of report generation</li>
                        <li>• Charts and images are uploaded to Notion's file storage</li>
                        <li>• Database entries include metadata for filtering and sorting</li>
                        <li>• All exported content includes backlinks to the original analysis</li>
                        <li>• Template formatting supports Notion's markdown syntax</li>
                      </ul>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Save Button */}
              <div className="flex justify-end space-x-3">
                <Button variant="outline">
                  Cancel
                </Button>
                <Button onClick={handleSaveSettings} className="bg-gray-600 hover:bg-gray-700">
                  Save Configuration
                </Button>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}